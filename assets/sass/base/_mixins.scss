@mixin responsive($width: $ms-small, $min-max: 'min') {
    @media (#{$min-max}-width: $width) {
        @content;
    }
}

@mixin responsive-orientation($width: $ms-small, $orientation: landscape, $min-max: 'min') {
    @media only screen and (#{$min-max}-width: $width) and (orientation: $orientation) {
        @content;
    }
}

$screen-xs-min: 414px;
$screen-sm-min: 768px;
$screen-md-min: 960px;
$screen-lg-min: 1040px;
$screen-xl-min: 1440px;
$screen-xxl-min: 1640px;

@mixin breakpoint($class) {
    @if $class==mobile-only {
        @media (max-width: #{$screen-sm-min} - 1) {
            @content;
        }
    }

    @else if $class==xs {
        @media (min-width: #{$screen-xs-min}) {
            @content;
        }
    }

    @else if $class==sm {
        @media (min-width: #{$screen-sm-min}) {
            @content;
        }
    }

    @else if $class==md {
        @media (min-width: #{$screen-md-min}) {
            @content;
        }
    }

    @else if $class==lg {
        @media (min-width: #{$screen-lg-min}) {
            @content;
        }
    }

    @else if $class==xl {
        @media (min-width: #{$screen-xl-min}) {
            @content;
        }
    }

    @else if $class==xxl {
        @media (min-width: #{$screen-xxl-min}) {
            @content;
        }
    }
    
    @else {
        @warn "Breakpoint mixin supports: mobile-only, sm, md, lg";
    }
}

@mixin pseudo {
    position: absolute;
    content: '';
}

@mixin absolute-center {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
}


/*********************************************************************
*  =Font Size
*********************************************************************/
$baseline_px: 16px;

@mixin rem($property, $px_values) {
  // Convert the baseline into rems
  $baseline_rem: ($baseline_px / 1rem); // Print the first line in pixel values
  #{$property}: $px_values; // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px_values)=='number' {
    #{$property}: $px_values / $baseline_rem;
  } // If there is more than one value, create a list and perform equations on each value
  @else {
    // Create an empty list that we can dump values into
    $rem_values: ();
    @each $value in $px_values {
      // If the value is zero, return 0
      @if $value==0 {
        $rem_values: append($rem_values, $value);
      } // If the value is not zero, convert it from px to rem
      @else {
        $rem_values: append($rem_values, ($value / $baseline_rem));
      }
    } // Return the property and its list of converted values
    #{$property}: $rem_values;
  }
}


$transition: cubic-bezier(.77, 0, .3, .99);